<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chenyao&#39;s blog</title>
  
  <link href="/chenyao.com/atom.xml" rel="self"/>
  
  <link href="https://just-me-cy.github.io/chenyao.com/"/>
  <updated>2016-09-03T03:04:21.000Z</updated>
  <id>https://just-me-cy.github.io/chenyao.com/</id>
  
  <author>
    <name>just-me-cy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数式编程一</title>
    <link href="https://just-me-cy.github.io/chenyao.com/2016/09/02/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
    <id>https://just-me-cy.github.io/chenyao.com/2016/09/02/函数式编程一/</id>
    <published>2016-09-02T05:52:18.000Z</published>
    <updated>2016-09-03T03:04:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>维基百科对函数式编程的定义</p>
<blockquote>
<p>函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>
</blockquote>
<h2 id="函数式编程语言特性"><a href="#函数式编程语言特性" class="headerlink" title="函数式编程语言特性"></a>函数式编程语言特性</h2><ol>
<li>函数是第一类的对象<br>数学中要求函数必须有自变量和因变量，在函数式编程中，每个函数必须有输入参数和返回值</li>
<li>无副作用的纯函数<br>函数的执行既不影响外界也不会被外界影响，只要参数不变，返回值一定不变</li>
<li>柯里化<br>包含了多个参数的函数转换成多个包含一个参数的函数，分步计算，将一个复杂的函数分解成多个简单函数，并且函数调用时可以逐步进行</li>
<li>高阶函数<br>使用函数作为参数，或者返回函数，像传递object一样，传递函数处理逻辑。例如高数，对一个函数求导的函数，其实就是高阶函数，原函数经过求导变换后，得到导函数，那么原函数便是输入参数，导函数便是返回值。</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>将一个二维数组变一维<br> 实现的方法有很多，分别看下一般实现和以函数式编程方式去实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 版本1</div><div class="line">  function merge2dArr1(arrays) &#123;</div><div class="line">    var count = arrays.length;</div><div class="line">    var merged = new Array(count);</div><div class="line">    var c = 0;</div><div class="line">    for (var i = 0; i &lt; count; ++i) &#123;</div><div class="line">      for (var j = 0, jlen = arrays[i].length; j &lt; jlen; ++j) &#123;</div><div class="line">        merged[c++] = arrays[i][j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    return merged;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //版本2</div><div class="line">  function merge2dArr2(arrays)&#123;</div><div class="line">    var ret = [];</div><div class="line">    var len = arrays.length;</div><div class="line">    for (var i=0; i&lt;len; i++)&#123;</div><div class="line">      ret = ret.concat(arrays[i]);</div><div class="line">    &#125;</div><div class="line">    return ret;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 版本3</div><div class="line">  function merge2dArr3(arrays)&#123;</div><div class="line">    return arrays.reduce(function(previous,current)&#123;</div><div class="line">      return previous.concat(current);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  对比3个版本，版本3的实现是简洁，如果用es6的语法写，更清楚</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> merge2dArr = arr =&gt; arr.reduce((p,c) =&gt; p.concat(c));</div></pre></td></tr></table></figure>
<ul>
<li>从一句话中依次取4个词，它们不包括数字1到9</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 版本1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstFour1</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> inputArr = str.split(<span class="string">' '</span>),</div><div class="line">    i,</div><div class="line">    len = inputArr.length,</div><div class="line">    count,</div><div class="line">    ret = [];</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, count = <span class="number">0</span>; i &lt; len, count &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="regexp">/[1-9]/</span>.test(inputArr[i])) &#123;</div><div class="line">      ret.push(inputArr[i]);</div><div class="line">      count ++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 版本2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstFour2</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">' '</span>).filter(i =&gt; !<span class="regexp">/[1-9]/</span>.test(i)).slice(<span class="number">0</span>,<span class="number">4</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//测试</span></div><div class="line"> <span class="keyword">var</span> str = <span class="string">'i am1 c2 y w a y'</span>;</div><div class="line">getFirstFour1(str)</div><div class="line"><span class="comment">//["i", "y", "w", "a"]</span></div><div class="line">getFirstFour2(str)</div><div class="line"><span class="comment">//["i", "y", "w", "a"]</span></div></pre></td></tr></table></figure>
<ul>
<li>存取对象的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//版本1</span></div><div class="line"><span class="keyword">var</span> values = [];</div><div class="line"><span class="keyword">var</span> accumulate = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> values.push(obj.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;name:<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;name:<span class="number">2</span>&#125;;</div><div class="line">accumulate(obj1);</div><div class="line">accumulate(obj2);</div><div class="line"></div><div class="line"><span class="comment">// 版本2</span></div><div class="line"><span class="keyword">var</span> accumulate2 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = [];</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    obj &amp;&amp; obj.name &amp;&amp; value.push(obj.name);</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>  版本1中values是全局的，我们无法保证values不被其它代码修改。而版本2使用闭包，和外界环境隔离开来，代码更健壮。</p>
<h2 id="FP常用工具函数"><a href="#FP常用工具函数" class="headerlink" title="FP常用工具函数"></a>FP常用工具函数</h2><ul>
<li><p>Array.prototype.map()</p>
</li>
<li><p>Array.prototype.filter()</p>
</li>
<li><p>Array.prototype.reduce()</p>
</li>
<li><p>Array.prototype.every()</p>
</li>
<li><p>Array.prototype.some()</p>
</li>
<li><p>Array.prototype.concat()</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;维基百科对函数式编程的定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数式编程（英语：functional programming）或称函数
    
    </summary>
    
      <category term="js" scheme="https://just-me-cy.github.io/chenyao.com/categories/js/"/>
    
    
      <category term="js" scheme="https://just-me-cy.github.io/chenyao.com/tags/js/"/>
    
      <category term="FP" scheme="https://just-me-cy.github.io/chenyao.com/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程二</title>
    <link href="https://just-me-cy.github.io/chenyao.com/2016/09/02/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BA%8C/"/>
    <id>https://just-me-cy.github.io/chenyao.com/2016/09/02/函数式编程二/</id>
    <published>2016-09-02T05:52:18.000Z</published>
    <updated>2016-09-03T03:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="偏函数-柯里化-函数合成"><a href="#偏函数-柯里化-函数合成" class="headerlink" title="偏函数/柯里化/函数合成"></a>偏函数/柯里化/函数合成</h2><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><ul>
<li>预先填充左部参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.partialApplyLeft = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> func = <span class="keyword">this</span>;</div><div class="line">  args = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="keyword">this</span>,args.concat([].slice.call(<span class="built_in">arguments</span>)));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  看一个例子数字转换为16进制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nums2hex</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">componentToHex</span>(<span class="params">component</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> hex = component.toString(<span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> hex.length &lt; <span class="number">2</span> ? <span class="string">'0'</span>+hex : hex;</div><div class="line">  &#125;</div><div class="line"> 	<span class="keyword">return</span> [].map.call(<span class="built_in">arguments</span>, componentToHex).join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">测试</div><div class="line">nums2hex(<span class="number">1</span>)</div><div class="line"><span class="string">"01"</span></div><div class="line">nums2hex(<span class="number">2</span>)</div><div class="line"><span class="string">"02"</span></div><div class="line">nums2hex(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="string">"0102"</span></div><div class="line"></div><div class="line"><span class="comment">//通过偏函数，产生另一个函数，输出结果为确定r值的红色系</span></div><div class="line"><span class="keyword">var</span> shadesOfRed = nums2hex.partialApplyLeft(<span class="number">255</span>);</div><div class="line">shadesOfRed(<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">shadesOfRed(<span class="number">20</span>,<span class="number">30</span>);</div></pre></td></tr></table></figure>
<ul>
<li>预先填充右侧参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.partialApplyRight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> func = <span class="keyword">this</span>;</div><div class="line">  args = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="keyword">this</span>,[].slice.call(<span class="built_in">arguments</span>).concat(args));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过偏函数，产生另一个函数，输出结果为确定b值的红色系</span></div><div class="line"><span class="keyword">var</span> shadesOfBlue = nums2hex.partialApplyRight(<span class="number">255</span>);</div><div class="line">shadesOfBlue(<span class="number">20</span>,<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>  偏函数通过给函数指定部分参数，得到有某些约束的新的函数。下面看下currying</p>
<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>  在Function原型链上添加curry</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.curry = <span class="function"><span class="keyword">function</span> (<span class="params">numArgs</span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> func = <span class="keyword">this</span>;</div><div class="line"> <span class="keyword">var</span> numArgs = numArgs || func.length;</div><div class="line"> <span class="comment">//递归获取参数</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">subCurry</span>(<span class="params">prev</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = prev.concat(arg);</div><div class="line">    <span class="comment">//如果参数个数未达到，仍返回柯里化函数，期待更多参数</span></div><div class="line">    <span class="keyword">if</span> ( args.length &lt; numArgs)&#123;</div><div class="line">      <span class="keyword">return</span> subCurry(args);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//否则返回计算结果</span></div><div class="line">    <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args);</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> subCurry([]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  只有当函数柯里化完全后，才会从左到右传递参数，执行；看一个例子rgb转化为16进制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hex</span>(<span class="params">r, g, b</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'#'</span> + nums2hex(r) + nums2hex(g) + nums2hex(b);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> hexColors = rgb2hex.curry();</div><div class="line"> hexColors(<span class="number">10</span>) </div><div class="line"> <span class="comment">// 返回curried function</span></div><div class="line"> hexColors(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>)</div><div class="line"> <span class="comment">// "#0a141e"</span></div><div class="line"></div><div class="line"> 指定不同位置的参数</div><div class="line"> <span class="keyword">var</span> reds = <span class="function"><span class="keyword">function</span>(<span class="params">g,b</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> hexColors(<span class="number">255</span>)(g)(b)</div><div class="line"> &#125;;</div><div class="line"> <span class="keyword">var</span> greens = <span class="function"><span class="keyword">function</span>(<span class="params">r,b</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> hexColors(r)(<span class="number">255</span>)(b)</div><div class="line"> &#125;;</div><div class="line"> <span class="keyword">var</span> blues = <span class="function"><span class="keyword">function</span>(<span class="params">r,g</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> hexColors(r)(g)(<span class="number">255</span>)</div><div class="line"> &#125;;</div><div class="line"> reds(<span class="number">10</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>  如果要被curry的函数没有定义参数，允许传任意多的参数去调用，此种情况，我们手动指定参数个数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hexs = nums2hex.curry(<span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>curry不太适用于接受可变数量参数的函数，而偏函数理适用</p>
<h2 id="函数合成"><a href="#函数合成" class="headerlink" title="函数合成"></a>函数合成</h2><p>  通过简单的函数合成复杂的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.compose = <span class="function"><span class="keyword">function</span>(<span class="params">prevFun</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> nextFun = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> nextFun.apply(<span class="keyword">this</span>,[prevFun.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)]); <span class="comment">// 注意apply 和 call 参数的区别</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">function1</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span> a + <span class="string">' 1'</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">function2</span>(<span class="params">b</span>)</span>&#123;<span class="keyword">return</span> b + <span class="string">' 2'</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">function3</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> c + <span class="string">' 3'</span>;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> composition = function3.compose(function2).compose(function1);</div><div class="line">composition(<span class="string">'count'</span>);</div><div class="line"><span class="string">"count 1 2 3"</span></div></pre></td></tr></table></figure>
<p>  函数的调用顺序是从右往左，从左往右，也很容易实现从左往右</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改上例第4行</span></div><div class="line"><span class="keyword">return</span> prevFunc.call(<span class="keyword">this</span>, nextFunc.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;偏函数-柯里化-函数合成&quot;&gt;&lt;a href=&quot;#偏函数-柯里化-函数合成&quot; class=&quot;headerlink&quot; title=&quot;偏函数/柯里化/函数合成&quot;&gt;&lt;/a&gt;偏函数/柯里化/函数合成&lt;/h2&gt;&lt;h2 id=&quot;偏函数&quot;&gt;&lt;a href=&quot;#偏函数&quot; class
    
    </summary>
    
      <category term="js" scheme="https://just-me-cy.github.io/chenyao.com/categories/js/"/>
    
    
      <category term="js" scheme="https://just-me-cy.github.io/chenyao.com/tags/js/"/>
    
      <category term="FP" scheme="https://just-me-cy.github.io/chenyao.com/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title>reselect实践</title>
    <link href="https://just-me-cy.github.io/chenyao.com/2016/08/31/reselect/"/>
    <id>https://just-me-cy.github.io/chenyao.com/2016/08/31/reselect/</id>
    <published>2016-08-31T11:32:35.000Z</published>
    <updated>2016-08-31T13:19:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>最近在cms系统中使用了<code>redux</code>，由于系统主要用于产品的编辑配置，用户交互比较多，<code>store</code>承载的数据量比较大，采用了<a href="https://github.com/reactjs/reselect" target="_blank" rel="external"><code>reselect</code></a>。<br>使用<code>reselect</code>出于以下两点考虑：</p>
<ol>
<li>优化性能<br>如果有从state中大量计算衍生数据的需求，即父组件state通过计算作为props传递给子组件，那么state的任何变化都会引起重新计算。<br>通过reselect可以创建带有记忆的selector，只有相关属性变化了才去重新计算衍生数据.</li>
<li>代码组织<br>通过reselect创建了数据处理抽象层,专门处理state到子组件的映射。</li>
</ol>
<h3 id="官方对reselect的说明："><a href="#官方对reselect的说明：" class="headerlink" title="官方对reselect的说明："></a>官方对reselect的说明：</h3><blockquote>
<ol>
<li>Selectors can compute derived data, allowing Redux to store the minimal possible state.</li>
<li>Selectors are efficient. A selector is not recomputed unless one of its arguments change.</li>
<li>Selectors are composable. They can be used as input to other selectors.</li>
</ol>
</blockquote>
<p>使用<code>selector</code>可以提高<code>react</code>和<code>redux</code>的性能<br>    <code>react</code>本身是基于虚拟节点diff来更新相应ui，没有dom的增删改查，性能已经相当好了。为了组件的更新及时反映在屏幕上，<code>react</code>都要重新执行渲染周期，但是随着ui复杂度的逐渐提升，过多的更新也会成为性能杀手。react也提供了<code>componentShouldUpdate</code>，在此方法内将上一个<code>props</code>、<code>state</code>和新的<code>props</code>、<code>state</code>作对比，去决定是否去执行更新，<code>PureRenderMixin</code>也是在基础上实现的。<br>    如果子组件的<code>props</code>是父组件通过计算后传递下去的，每当父组件更新，那么要重新计算。可以使用<code>reselect</code>省去没必要的重新计算.</p>
<h2 id="reselectAPI"><a href="#reselectAPI" class="headerlink" title="reselectAPI"></a>reselectAPI</h2><h3 id="createSelector"><a href="#createSelector" class="headerlink" title="createSelector"></a>createSelector</h3><blockquote>
<p>createSelector(…inputSelectors | [inputSelectors], resultFunc)</p>
</blockquote>
<ol>
<li>参数<code>inputSelectors</code>可是逗号分隔的<code>selectors</code>，也可是由<code>selectors</code>组成的数组，每当<code>state</code>变化了，就会执行<code>selectors</code>定义的计算，计算结果作为<code>resultFunc</code>的参数。</li>
<li><p><code>resultFunc</code>也就是转换函数<br><strong>主要流程</strong>：如果 <code>state tree</code>的改变会引起<code>inputselectors</code>值变化，那么<code>selector</code>会调用转换函数，传入<code>inputselectors</code>作为参数，并返回结果。如果<code>inputSelectors</code>的值和前一次的一样，它将会直接返回前一次计算的数据，而不会再调用一次转换函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySelector = createSelector(</div><div class="line">  state =&gt; state.values.value1,</div><div class="line">  state =&gt; state.values.value2,</div><div class="line">  (value1, value2) =&gt; value1 + value2</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// You can also pass an array of selectors</span></div><div class="line"><span class="keyword">const</span> totalSelector = createSelector(</div><div class="line">  [</div><div class="line">  state =&gt; state.values.value1,</div><div class="line">  state =&gt; state.values.value2</div><div class="line">  ],</div><div class="line">  (value1, value2) =&gt; value1 + value2</div><div class="line">)</div></pre></td></tr></table></figure>
<p><code>createSelector</code>内部，默认通过===比较判断，由<code>inputSelector</code>选择的值和上一次的值有无变化，所以<code>inputSelectors</code>的参数要是<code>immutable</code>的。<br><code>createSelector</code>源码如下，可知<code>createSelector</code>是由<code>createSelectorCreator</code>指定了默认比较函数创建的偏函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createSelector = createSelectorCreator(defaultMemoize)</div></pre></td></tr></table></figure>
<p>通过<code>createSelector</code>创建的<code>selector</code>缓存大小为1，也就说当参数中任意<code>inputSelectors</code>的返回值变化了，结果都会重新计算。</p>
</li>
</ol>
<h3 id="defaultMemoize"><a href="#defaultMemoize" class="headerlink" title="defaultMemoize"></a>defaultMemoize</h3><blockquote>
<p>defaultMemoize(func, equalityCheck = defaultEqualityCheck)</p>
</blockquote>
<ol>
<li>如果不指定比较函数，那么使用<code>defaultEqualityCheck</code>，<code>createSelector</code>默认使用的缓存函数。<code>defaultMemoize</code>的缓存大小为1，当任意参数的变化了会重新执行计算。</li>
<li><p>equalityCheck是用来决定参数是否变化的辅助函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultEqualityCheck</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a === b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="createSelectorCreator"><a href="#createSelectorCreator" class="headerlink" title="createSelectorCreator"></a>createSelectorCreator</h3><blockquote>
<p>createSelectorCreator(memoize, …memoizeOptions)</p>
</blockquote>
<ol>
<li>此方法是<code>createSelector</code>的自定义版本，<code>memoize</code>是自定义的记忆函数，用来替换<code>defaultMemoize</code></li>
<li><code>...memoizeOptions</code>是额外的参数，会被传递给记忆函数。记忆函数的第一个参数是resultFunc。<br>看源码更容易理解<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSelectorCreator</span>(<span class="params">memoize, ...memoizeOptions</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (...funcs) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> recomputations = <span class="number">0</span></div><div class="line">    <span class="keyword">const</span> resultFunc = funcs.pop()</div><div class="line">    <span class="keyword">const</span> dependencies = getDependencies(funcs)</div><div class="line"></div><div class="line">    <span class="keyword">const</span> memoizedResultFunc = memoize(</div><div class="line">      (...args) =&gt; &#123;</div><div class="line">        recomputations++</div><div class="line">        <span class="keyword">return</span> resultFunc(...args)</div><div class="line">      &#125;,</div><div class="line">      ...memoizeOptions</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="keyword">const</span> selector = (state, props, ...args) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> params = dependencies.map(</div><div class="line">        dependency =&gt; dependency(state, props, ...args)</div><div class="line">      )</div><div class="line">      <span class="keyword">return</span> memoizedResultFunc(...params)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    selector.resultFunc = resultFunc</div><div class="line">    selector.recomputations = () =&gt; recomputations</div><div class="line">    selector.resetRecomputations = () =&gt; recomputations = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> selector</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="createStructuredSelector"><a href="#createStructuredSelector" class="headerlink" title="createStructuredSelector"></a>createStructuredSelector</h3><blockquote>
<p>createStructuredSelector({inputSelectors}, selectorCreator = createSelector)</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>  比如有个列表<br>  <img src="../../../../images/select-160831.png" alt="reselect例子"><br>  引入相应的函数<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">import &#123; createSelectorCreator, defaultMemoize &#125; <span class="keyword">from</span> <span class="string">'reselect'</span>;</div><div class="line"><span class="keyword">import</span> &#123; isEqual &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</div></pre></td></tr></table></figure></p>
<p>  创建2个selector<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> prosSelector = (state) =&gt; state.product.productsByQuery.get(<span class="string">'items'</span>);</div><div class="line"><span class="keyword">const</span> filterSelector = (state) =&gt; state.product.visibilityFilter;</div></pre></td></tr></table></figure></p>
<p>  使用<code>lodash.isEqual</code>比较函数代替默认的<code>===</code>比较，还是使用默认的<code>defaultMemoize</code>，只是加上了额外的参数<code>lodash.isEqual</code>。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createDeepEqualSelector = createSelectorCreator(</div><div class="line">  defaultMemoize,</div><div class="line">  isEqual</div><div class="line">);</div><div class="line"><span class="keyword">const</span> selectPros = createDeepEqualSelector(</div><div class="line">  [prosSelector, filterSelector],</div><div class="line">  (pros, filter) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'重新计算select'</span>, pros);</div><div class="line">    <span class="keyword">switch</span> (filter) &#123;</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_ALL:</div><div class="line">        <span class="keyword">return</span> pros;</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_CHANGE:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'change'</span>);</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_SHELVE:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'shelve'</span>);</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_OFF_SHELVE:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'offShelve'</span>);</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_NEW:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'new'</span>);</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_OUT_OF_SALE:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'outOfSale'</span>);</div><div class="line">      <span class="keyword">case</span> Filters.SHOW_CONFIRM:</div><div class="line">        <span class="keyword">return</span> pros.filter(prosItem =&gt; prosItem.get(<span class="string">'statusCode'</span>) === <span class="string">'confirm'</span>);</div><div class="line">      <span class="keyword">default</span> :</div><div class="line">        <span class="keyword">return</span> pros;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>  在<code>mapStateToProps</code>返回一个映射对象，为子组件准备适合自己需要的状态视图。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  return &#123;</div><div class="line">    visiblePros: selectPros(state),</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在render中将visiblePros传给子组件<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ProductLists pros=&#123;visiblePros&#125; /&gt;</div></pre></td></tr></table></figure></p>
<p>  只有当决定子组件<code>props</code>的<code>prosSelector</code>，<code>filterSelector</code>任一返回值和上次不相同了，<code>selectPros</code>的回调函数才会执行，<code>visiblePros</code>才会更新，才会触发子组件<code>ProductLists</code>的<code>react</code>渲染周期，而在其它部分（非相关）变化时不做计算</p>
<p>  在实际项目中，可以组合使用<code>selectors</code>，带来的优点的让代码组织非常清晰。</p>
<p>参考：<br><a href="https://github.com/reactjs/reselect" target="_blank" rel="external">https://github.com/reactjs/reselect</a><br><a href="http://redux.js.org/docs/recipes/ComputingDerivedData.html" target="_blank" rel="external">http://redux.js.org/docs/recipes/ComputingDerivedData.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;最近在cms系统中使用了&lt;code&gt;redux&lt;/code&gt;，由于系统主要用于产品的编辑配置，用户交互比较多，&lt;code&gt;store&lt;/co
    
    </summary>
    
      <category term="redux" scheme="https://just-me-cy.github.io/chenyao.com/categories/redux/"/>
    
    
      <category term="redux" scheme="https://just-me-cy.github.io/chenyao.com/tags/redux/"/>
    
      <category term="reselect" scheme="https://just-me-cy.github.io/chenyao.com/tags/reselect/"/>
    
  </entry>
  
  <entry>
    <title>antd-redux</title>
    <link href="https://just-me-cy.github.io/chenyao.com/2016/08/25/antd-redux-desc/"/>
    <id>https://just-me-cy.github.io/chenyao.com/2016/08/25/antd-redux-desc/</id>
    <published>2016-08-25T12:53:01.000Z</published>
    <updated>2016-08-28T04:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="antd-redux-demo"><a href="#antd-redux-demo" class="headerlink" title="antd-redux-demo"></a>antd-redux-demo</h1><p>a demo for antd and redux. </p>
<h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><ul>
<li>node ^5.0.0</li>
<li>npm ^3.0.0</li>
</ul>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><ul>
<li>Just clone the repo and install the necessary node modules</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/just-me-cy/antd-redux.git</div><div class="line">$ cd antd-redux</div><div class="line">$ npm install </div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<ul>
<li><del>you should start server to apply data</del></li>
<li><del>$ node server</del></li>
<li>use <a href="http://rap.taobao.org/" target="_blank" rel="external">rap</a> for mockdata</li>
<li>open your browser <a href="http://localhost:8002/" target="_blank" rel="external">http://localhost:8002/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;antd-redux-demo&quot;&gt;&lt;a href=&quot;#antd-redux-demo&quot; class=&quot;headerlink&quot; title=&quot;antd-redux-demo&quot;&gt;&lt;/a&gt;antd-redux-demo&lt;/h1&gt;&lt;p&gt;a demo for antd an
    
    </summary>
    
      <category term="react" scheme="https://just-me-cy.github.io/chenyao.com/categories/react/"/>
    
    
      <category term="antd" scheme="https://just-me-cy.github.io/chenyao.com/tags/antd/"/>
    
      <category term="redux" scheme="https://just-me-cy.github.io/chenyao.com/tags/redux/"/>
    
  </entry>
  
</feed>
